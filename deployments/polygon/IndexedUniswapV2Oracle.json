{
  "address": "0xe0E828643266Fab54716503f82FB404867214f39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uniswapFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "canUpdatePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "canUpdatePrices",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "canUpdateArr",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageEthForTokens",
      "outputs": [
        {
          "internalType": "uint144[]",
          "name": "averageValuesInWETH",
          "type": "uint144[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageEthForTokens",
      "outputs": [
        {
          "internalType": "uint144",
          "name": "",
          "type": "uint144"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageEthPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112",
          "name": "priceAverage",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageEthPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112[]",
          "name": "averagePrices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageTokenPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112",
          "name": "priceAverage",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageTokenPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct FixedPoint.uq112x112[]",
          "name": "averagePrices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "wethAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageTokensForEth",
      "outputs": [
        {
          "internalType": "uint144[]",
          "name": "averageValuesInWETH",
          "type": "uint144[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeAverageTokensForEth",
      "outputs": [
        {
          "internalType": "uint144",
          "name": "",
          "type": "uint144"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeTwoWayAveragePrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "priceAverage",
              "type": "uint224"
            },
            {
              "internalType": "uint224",
              "name": "ethPriceAverage",
              "type": "uint224"
            }
          ],
          "internalType": "struct PriceLibrary.TwoWayAveragePrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minTimeElapsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTimeElapsed",
          "type": "uint256"
        }
      ],
      "name": "computeTwoWayAveragePrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "priceAverage",
              "type": "uint224"
            },
            {
              "internalType": "uint224",
              "name": "ethPriceAverage",
              "type": "uint224"
            }
          ],
          "internalType": "struct PriceLibrary.TwoWayAveragePrice[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "priceKey",
          "type": "uint256"
        }
      ],
      "name": "getPriceObservationInWindow",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "priceCumulativeLast",
              "type": "uint224"
            },
            {
              "internalType": "uint224",
              "name": "ethPriceCumulativeLast",
              "type": "uint224"
            }
          ],
          "internalType": "struct PriceLibrary.PriceObservation",
          "name": "observation",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timeFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeTo",
          "type": "uint256"
        }
      ],
      "name": "getPriceObservationsInRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint224",
              "name": "priceCumulativeLast",
              "type": "uint224"
            },
            {
              "internalType": "uint224",
              "name": "ethPriceCumulativeLast",
              "type": "uint224"
            }
          ],
          "internalType": "struct PriceLibrary.PriceObservation[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "priceKey",
          "type": "uint256"
        }
      ],
      "name": "hasPriceObservationInWindow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updatePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "updatePrices",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "pricesUpdated",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79da7d019238e9e362a75ee16a5e22cdd378f44d82150c0299874f837da55b56",
  "receipt": {
    "to": null,
    "from": "0x236ECcAB8cdcfEDb099dE85c4060024bA3cE4d46",
    "contractAddress": "0xe0E828643266Fab54716503f82FB404867214f39",
    "transactionIndex": 42,
    "gasUsed": "2744489",
    "logsBloom": "0x
    "blockHash": "0xc5241efb9a367325139607f1041796386a0daea4d69fc1ccd9b67f9fa5d76850",
    "transactionHash": "0x79da7d019238e9e362a75ee16a5e22cdd378f44d82150c0299874f837da55b56",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 22634321,
        "transactionHash": "0x79da7d019238e9e362a75ee16a5e22cdd378f44d82150c0299874f837da55b56",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000236eccab8cdcfedb099de85c4060024ba3ce4d46",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x000000000000000000000000000000000000000000000000012482f2360c8c000000000000000000000000000000000000000000000000008aaf82871e5c96000000000000000000000000000000000000000000000007c1ccc98ae92f5c8f23000000000000000000000000000000000000000000000000898aff94e8500a000000000000000000000000000000000000000000000007c1cdee0ddb65691b23",
        "logIndex": 173,
        "blockHash": "0xc5241efb9a367325139607f1041796386a0daea4d69fc1ccd9b67f9fa5d76850"
      }
    ],
    "blockNumber": 22634321,
    "cumulativeGasUsed": "11139307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"
  ],
  "solcInputHash": "0x4201bd2c56bf7e5fc81e7bd5109244e38ed9712df3e34c909a8ae3f61fea064b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"canUpdatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"canUpdatePrices\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"canUpdateArr\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageEthForTokens\",\"outputs\":[{\"internalType\":\"uint144[]\",\"name\":\"averageValuesInWETH\",\"type\":\"uint144[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageEthForTokens\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageEthPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"priceAverage\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageEthPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112[]\",\"name\":\"averagePrices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageTokenPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112\",\"name\":\"priceAverage\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageTokenPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct FixedPoint.uq112x112[]\",\"name\":\"averagePrices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wethAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageTokensForEth\",\"outputs\":[{\"internalType\":\"uint144[]\",\"name\":\"averageValuesInWETH\",\"type\":\"uint144[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeAverageTokensForEth\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeTwoWayAveragePrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"priceAverage\",\"type\":\"uint224\"},{\"internalType\":\"uint224\",\"name\":\"ethPriceAverage\",\"type\":\"uint224\"}],\"internalType\":\"struct PriceLibrary.TwoWayAveragePrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minTimeElapsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeElapsed\",\"type\":\"uint256\"}],\"name\":\"computeTwoWayAveragePrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"priceAverage\",\"type\":\"uint224\"},{\"internalType\":\"uint224\",\"name\":\"ethPriceAverage\",\"type\":\"uint224\"}],\"internalType\":\"struct PriceLibrary.TwoWayAveragePrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceKey\",\"type\":\"uint256\"}],\"name\":\"getPriceObservationInWindow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"priceCumulativeLast\",\"type\":\"uint224\"},{\"internalType\":\"uint224\",\"name\":\"ethPriceCumulativeLast\",\"type\":\"uint224\"}],\"internalType\":\"struct PriceLibrary.PriceObservation\",\"name\":\"observation\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeTo\",\"type\":\"uint256\"}],\"name\":\"getPriceObservationsInRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"priceCumulativeLast\",\"type\":\"uint224\"},{\"internalType\":\"uint224\",\"name\":\"ethPriceCumulativeLast\",\"type\":\"uint224\"}],\"internalType\":\"struct PriceLibrary.PriceObservation[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceKey\",\"type\":\"uint256\"}],\"name\":\"hasPriceObservationInWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"updatePrices\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"pricesUpdated\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"canUpdatePrice(address)\":{\"details\":\"Returns a boolean indicating whether the price of `token` can be updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation.\"},\"canUpdatePrices(address[])\":{\"details\":\"Returns a boolean array indicating whether the price of each token in `tokens` can be updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation.\"},\"computeAverageEthForTokens(address,uint256,uint256,uint256)\":{\"details\":\"Compute the average value of `tokenAmount` ether in terms of weth.   * Computes the time-weighted average price of `token` in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by `wethAmount`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageEthForTokens(address[],uint256[],uint256,uint256)\":{\"details\":\"Compute the average value of each amount of tokens in `tokenAmounts` in terms of the corresponding token in `tokens`.   * Computes the time-weighted average price of each token in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by the corresponding amount in `tokenAmounts`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageEthPrice(address,uint256,uint256)\":{\"details\":\"Returns the UQ112x112 struct representing the average price of weth in terms of `token`.   * Computes the time-weighted average price of weth in terms of `token` by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageEthPrices(address[],uint256,uint256)\":{\"details\":\"Returns the UQ112x112 structs representing the average price of weth in terms of each token in `tokens`.   * Computes the time-weighted average price of weth in terms of each token by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageTokenPrice(address,uint256,uint256)\":{\"details\":\"Returns the UQ112x112 struct representing the average price of `token` in terms of weth.   * Computes the time-weighted average price of `token` in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageTokenPrices(address[],uint256,uint256)\":{\"details\":\"Returns the UQ112x112 structs representing the average price of each token in `tokens` in terms of weth.   * Computes the time-weighted average price of each token in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageTokensForEth(address,uint256,uint256,uint256)\":{\"details\":\"Compute the average value of `wethAmount` ether in terms of `token`.   * Computes the time-weighted average price of weth in terms of the token by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by `wethAmount`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeAverageTokensForEth(address[],uint256[],uint256,uint256)\":{\"details\":\"Compute the average value of each amount of ether in `wethAmounts` in terms of the corresponding token in `tokens`.   * Computes the time-weighted average price of weth in terms of each token by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by the corresponding amount in `wethAmounts`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeTwoWayAveragePrice(address,uint256,uint256)\":{\"details\":\"Returns the TwoWayAveragePrice struct representing the average price of weth in terms of `token` and the average price of `token` in terms of weth.   * Computes the time-weighted average price of weth in terms of `token` and the price of `token` in terms of weth by getting the current prices from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"computeTwoWayAveragePrices(address[],uint256,uint256)\":{\"details\":\"Returns the TwoWayAveragePrice structs representing the average price of weth in terms of each token in `tokens` and the average price of each token in terms of weth.   * Computes the time-weighted average price of weth in terms of each token and the price of each token in terms of weth by getting the current prices from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour.\"},\"getPriceObservationInWindow(address,uint256)\":{\"details\":\"Returns the price observation for `token` recorded in `priceKey`. Reverts if no prices have been recorded for that key.\",\"params\":{\"priceKey\":\"Index of the hour to query\",\"token\":\"Token to retrieve a price for\"}},\"getPriceObservationsInRange(address,uint256,uint256)\":{\"details\":\"Returns all price observations for `token` recorded between `timeFrom` and `timeTo`.\"},\"hasPriceObservationInWindow(address,uint256)\":{\"details\":\"Returns a boolean indicating whether a price was recorded for `token` at `priceKey`.\",\"params\":{\"priceKey\":\"Index of the hour to check\",\"token\":\"Token to check if the oracle has a price for\"}},\"updatePrice(address)\":{\"details\":\"Attempts to update the price of `token` and returns a boolean indicating whether it was updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation.\"},\"updatePrices(address[])\":{\"details\":\"Attempts to update the price of each token in `tokens` and returns a boolean array indicating which tokens had their prices updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"temp-contracts/IndexedUniswapV2Oracle.sol\":\"IndexedUniswapV2Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\",\"urls\":[\"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf\",\"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH\"]},\"temp-contracts/IndexedUniswapV2Oracle.sol\":{\"keccak256\":\"0x6c8a19e4732624b012395a249b33f0c983b7ba7bfecd4d3f5fae58d837fb1d8c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6dc0041ba1c2cdd2f5ff06413562ef5da1304cf400962b08594d320233087792\",\"dweb:/ipfs/QmQ7aPL16qqYUeMXhpxhN2M7Smdd5oXGcxxJaRNjbThLHA\"]},\"temp-contracts/interfaces/IIndexedUniswapV2Oracle.sol\":{\"keccak256\":\"0xfebe2d6eb9d0a456cc8ef805b011d429de0eb206a90d99755262fded86f3ed95\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5ea99a71a45f955dce629d887f44136477b6775ea3301e64d21b61154ee450fa\",\"dweb:/ipfs/QmcEbyAmyuZLAQUUhoexN4ZiLeMegRJAZMeCBtK31PZ2VF\"]},\"temp-contracts/lib/Bits.sol\":{\"keccak256\":\"0x274819d5eca53fa0de70cb744f97567ce6c26ab6709c8bbde22cd643cd031cb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://64cf2a9b967c45e68db8473cbfae784939cecd8f4c06c586682dba6f86e69fc2\",\"dweb:/ipfs/QmXT38attR9ieXpwksK3MubgcwjBzdYK7bBCTBEhUVcoMH\"]},\"temp-contracts/lib/FixedPoint.sol\":{\"keccak256\":\"0xb55e5d7cba20c7c72b497f0553d1f7297a06b02b74c775c1de722a4975c38733\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://753f4e3e1d7e414ab3fa8a924580a53e068469cc7e2822c11e1a15d9742385a3\",\"dweb:/ipfs/QmSNCV5vfdq8A9iVmzLyJGuz6FDXAm3NAyuuahmeacHXUX\"]},\"temp-contracts/lib/IndexedPriceMapLibrary.sol\":{\"keccak256\":\"0xcf7c04c09239fc433c6a6277e4947a4bea5f7b7a97f5ed25ff65e1910c1dcbac\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d9cdad41b00c4254e21e007c93188a44c5ba29c58e0e820e990b43c5b63afdbe\",\"dweb:/ipfs/QmdL82MM3UMQyitaZc3dL5R6rPTBJSq6akQ3LUyXsizEea\"]},\"temp-contracts/lib/KeyIndex.sol\":{\"keccak256\":\"0x34734d94830fb91acda3908e9938a2bc64e598b74be928112de3546637acc47d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e4743d1a0b0b5fb66b43afa434a22abfeb56723ae57c62ef24068477ca2f243c\",\"dweb:/ipfs/QmUzys6HfHhhBfJ79FknNGy2KPpvyAKVUTq42GDqwcKnBq\"]},\"temp-contracts/lib/PriceLibrary.sol\":{\"keccak256\":\"0xde7020b323ba1a96741733c0497381141cbe1378a8cf98992e68f53a654ef785\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f14d5c59524a6544f92cfae479b7cec99d5d104b2eed5f7530b330d5223dae81\",\"dweb:/ipfs/QmXPvAS1v8JfKqK5MZ7MSW7ayFUcwGd7WwyYCTgP5swokz\"]},\"temp-contracts/lib/UniswapV2Library.sol\":{\"keccak256\":\"0xf110c5ecda06dcbc56d42ab8d3cfa6664bbedd67c880a70dc10e4bef6346e2a2\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://82769859a8eee4f67794b992452a4b7114a2d372118ccdba4034d7a1020165e4\",\"dweb:/ipfs/QmSnb7JGJqc4Nqy1hMwyGe3zyX3TfvWNSX3dgWUZLaKoTu\"]},\"temp-contracts/lib/UniswapV2OracleLibrary.sol\":{\"keccak256\":\"0x0c5df03edcc875601fa9de5624cfa28f08868adfc91d09200ad7fb39f723f85d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://56b2d2b696be0326b193dc0fa9d6af4d47642771860a7352dc0f65ba23c85f6f\",\"dweb:/ipfs/QmSJV8tRhUBtTHZEBN35RySvM28nJYVxogNy8VumvpFgyK\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80637c906a2a116100a257806396e85ced1161007157806396e85ced14610265578063bf6dd82e14610278578063c735e38c1461028b578063cdee7f6e146102ab578063ffd97b6f146102be5761010b565b80637c906a2a1461020c5780637e5296e01461021f57806388a14c3c1461023f5780639691b116146102525761010b565b80634f2acedf116100de5780634f2acedf1461019957806357653615146101b95780635acd73d7146101d9578063768d2c19146101ec5761010b565b806310bc482a146101105780632d726197146101395780633a9d6535146101595780634506006014610179575b600080fd5b61012361011e36600461254f565b6102de565b6040516101309190612982565b60405180910390f35b61014c6101473660046126aa565b61030f565b60405161013091906128ff565b61016c610167366004612579565b6103f1565b604051610130919061303c565b61018c610187366004612630565b610430565b6040516101309190612941565b6101ac6101a73660046125ac565b610551565b604051610130919061304f565b6101cc6101c7366004612579565b6105a9565b604051610130919061302e565b6101236101e7366004612534565b6105de565b6101ff6101fa3660046126aa565b610676565b60405161013091906128b2565b61018c61021a366004612630565b610743565b61023261022d3660046125f1565b610845565b604051610130919061282a565b61023261024d3660046125f1565b6108e6565b61016c610260366004612579565b610a10565b610123610273366004612534565b610a45565b6101ac6102863660046125ac565b610b1d565b61029e61029936600461254f565b610b54565b6040516101309190613020565b61014c6102b93660046126aa565b610bab565b6102d16102cc366004612579565b610c78565b6040516101309190612870565b6001600160a01b0382166000908152602081905260408120610306908363ffffffff610cac16565b90505b92915050565b606082828181101561033c5760405162461bcd60e51b815260040161033390612ab5565b60405180910390fd5b85806001600160401b038111801561035357600080fd5b5060405190808252806020026020018201604052801561038d57816020015b61037a612480565b8152602001906001900390816103725790505b50935060005b818110156103e5576103c68989838181106103aa57fe5b90506020020160208101906103bf9190612534565b8888610cbe565b8582815181106103d257fe5b6020908102919091010152600101610393565b50505050949350505050565b6103f9612480565b82828181101561041b5760405162461bcd60e51b815260040161033390612ab5565b610426868686610e21565b9695505050505050565b60608282818110156104545760405162461bcd60e51b815260040161033390612ab5565b878681146104745760405162461bcd60e51b815260040161033390612c4c565b806001600160401b038111801561048a57600080fd5b506040519080825280602002602001820160405280156104b4578160200160208202803683370190505b50935060005b81811015610543576105176105128a8a848181106104d457fe5b905060200201356105068e8e868181106104ea57fe5b90506020020160208101906104ff9190612534565b8b8b610cbe565b9063ffffffff610f6e16565b610fcd565b85828151811061052357fe5b6001600160901b03909216602092830291909101909101526001016104ba565b505050509695505050505050565b60008282818110156105755760405162461bcd60e51b815260040161033390612ab5565b61057d612480565b610588888787610cbe565b905061059d610512828963ffffffff610f6e16565b98975050505050505050565b6105b1612492565b8282818110156105d35760405162461bcd60e51b815260040161033390612ab5565b610426868686610fd4565b600061063a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016837f000000000000000000000000000000000000000000000000000000000000000063ffffffff61118816565b61064657506000610671565b6001600160a01b038216600090815260208190526040902061066e904263ffffffff61123e16565b90505b919050565b606082828181101561069a5760405162461bcd60e51b815260040161033390612ab5565b85806001600160401b03811180156106b157600080fd5b506040519080825280602002602001820160405280156106eb57816020015b6106d8612492565b8152602001906001900390816106d05790505b50935060005b818110156103e55761072489898381811061070857fe5b905060200201602081019061071d9190612534565b8888610fd4565b85828151811061073057fe5b60209081029190910101526001016106f1565b60608282818110156107675760405162461bcd60e51b815260040161033390612ab5565b878681146107875760405162461bcd60e51b815260040161033390612e14565b806001600160401b038111801561079d57600080fd5b506040519080825280602002602001820160405280156107c7578160200160208202803683370190505b50935060005b81811015610543576108196105128a8a848181106107e757fe5b905060200201356105068e8e868181106107fd57fe5b90506020020160208101906108129190612534565b8b8b610e21565b85828151811061082557fe5b6001600160901b03909216602092830291909101909101526001016107cd565b606081806001600160401b038111801561085e57600080fd5b50604051908082528060200260200182016040528015610888578160200160208202803683370190505b50915060005b818110156108de576108ba8585838181106108a557fe5b90506020020160208101906102739190612534565b8382815181106108c657fe5b9115156020928302919091019091015260010161088e565b505092915050565b606081806001600160401b03811180156108ff57600080fd5b50604051908082528060200260200182016040528015610929578160200160208202803683370190505b50915060005b818110156108de57600085858381811061094557fe5b905060200201602081019061095a9190612534565b6001600160a01b038116600090815260208190526040812091925090610986904263ffffffff61123e16565b90508080156109ea57506109ea6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016837f000000000000000000000000000000000000000000000000000000000000000063ffffffff61118816565b8584815181106109f657fe5b91151560209283029190910190910152505060010161092f565b610a18612480565b828281811015610a3a5760405162461bcd60e51b815260040161033390612ab5565b610426868686610cbe565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610a8957506001610671565b610a916124a9565b610aeb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016847f000000000000000000000000000000000000000000000000000000000000000063ffffffff61127b16565b6001600160a01b0384166000908152602081905260409020909150610b16908263ffffffff61135e16565b9392505050565b6000828281811015610b415760405162461bcd60e51b815260040161033390612ab5565b610b49612480565b610588888787610e21565b610b5c6124a9565b6001600160a01b0383166000908152602081905260409020610b84908363ffffffff61141216565b805190915063ffffffff166103095760405162461bcd60e51b815260040161033390612eda565b6060828281811015610bcf5760405162461bcd60e51b815260040161033390612ab5565b85806001600160401b0381118015610be657600080fd5b50604051908082528060200260200182016040528015610c2057816020015b610c0d612480565b815260200190600190039081610c055790505b50935060005b818110156103e557610c59898983818110610c3d57fe5b9050602002016020810190610c529190612534565b8888610e21565b858281518110610c6557fe5b6020908102919091010152600101610c26565b6001600160a01b0383166000908152602081905260409020606090610ca490848463ffffffff61146816565b949350505050565b6000610306838363ffffffff6115a816565b610cc6612480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415610d1257610d0b6001806115eb565b9050610b16565b600080610d6f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008863ffffffff61165f16565b6001600160a01b0388166000908152602081905260408120929450909250908190610da79063ffffffff808716908a908a906116cb16565b9150915081610dc85760405162461bcd60e51b815260040161033390612b9a565b6001600160a01b03881660009081526020818152604080832084845260019081019092529091208054918101549091610e149163ffffffff909116906001600160e01b031687876117c5565b9998505050505050505050565b610e29612480565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161415610e6e57610d0b6001806115eb565b600080610ecb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016877f000000000000000000000000000000000000000000000000000000000000000063ffffffff61165f16565b6001600160a01b0388166000908152602081905260408120929450909250908190610f039063ffffffff808716908a908a906116cb16565b9150915081610f245760405162461bcd60e51b815260040161033390612b2b565b6001600160a01b03881660009081526020818152604080832084845260010190915290208054610e149063ffffffff81169064010000000090046001600160e01b031687876117c5565b610f766124c9565b6000821580610f9c57505082516001600160e01b031682810290838281610f9957fe5b04145b610fb85760405162461bcd60e51b815260040161033390612e97565b60408051602081019091529081529392505050565b5160701c90565b610fdc612492565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316141561105757604051806040016040528061102b60016117e3565b516001600160e01b0316815260200161104460016117e3565b516001600160e01b031690529050610b16565b61105f6124a9565b6110b96001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016867f000000000000000000000000000000000000000000000000000000000000000063ffffffff61127b16565b80516001600160a01b03871660009081526020819052604081209293509182916110f1919063ffffffff90811690899089906116cb16565b91509150816111125760405162461bcd60e51b815260040161033390612a45565b61111a6124a9565b506001600160a01b03871660009081526020818152604080832084845260019081018352928190208151606081018352815463ffffffff80821683526001600160e01b036401000000009092048216958301959095529190940154169083015261059d908290869061180e16565b60008061119685858561187d565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156111d457600080fd5b505afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c91906126f8565b5091509150816001600160701b031660001415801561123357506001600160701b03811615155b979650505050505050565b6000806112508363ffffffff1661189b565b9050611262848263ffffffff6115a816565b15611271576000915050610309565b610ca484846118a3565b6112836124a9565b600080611290858561192c565b9150915060006112a18784846119b6565b905060008060006112b184611a13565b925092509250886001600160a01b0316866001600160a01b031614156113115760405180606001604052808263ffffffff168152602001846001600160e01b03168152602001836001600160e01b03168152509650505050505050610b16565b60405180606001604052808263ffffffff168152602001836001600160e01b03168152602001846001600160e01b03168152509650505050505050610b16565b5050505050509392505050565b60008061136f8484600001516118a3565b9050801561030657600061138c846000015163ffffffff1661189b565b905061139e858263ffffffff611c2616565b9150811561140a57600081815260018681016020908152604092839020875181549289015163ffffffff1990931663ffffffff91821617166401000000006001600160e01b0393841602178155928701519290910180546001600160e01b031916929091169190911790555b509392505050565b61141a6124a9565b506000908152600191820160209081526040918290208251606081018452815463ffffffff8116825264010000000090046001600160e01b0390811693820193909352930154169082015290565b606060006114758461189b565b905060006114828461189b565b90508181116114a35760405162461bcd60e51b815260040161033390612da7565b60606114b687848463ffffffff611c8b16565b9050600060028251816114c557fe5b049050806001600160401b03811180156114de57600080fd5b5060405190808252806020026020018201604052801561151857816020015b6115056124a9565b8152602001906001900390816114fd5790505b5094506020820160005b8281101561135157815160f01c86810160008181526001808e0160209081526040928390208351606081018552815463ffffffff811682526001600160e01b03640100000000909104811693820193909352920154169181019190915289516002909501948a908590811061159357fe5b60209081029190910101525050600101611522565b60008060006115b684611d92565b6000828152602088905260409020549193509150806115db5760009350505050610309565b610426818363ffffffff611da016565b6115f3612480565b6000826001600160701b03161161161c5760405162461bcd60e51b815260040161033390612fe9565b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b168161164a57fe5b046001600160e01b0316815250905092915050565b60008060008061166f868661192c565b9150915060006116808884846119b6565b9050866001600160a01b0316836001600160a01b031614156116b7576000806116a883611daa565b975095506116c3945050505050565b6000806116a883611f25565b935093915050565b60008060006116d98661189b565b905060006116e687612086565b9050808611158186111581806116f95750805b1561178557600084815260018b0160205260409020805463ffffffff16801580159061172a57508063ffffffff168b115b801561173e5750888163ffffffff168c0311155b80156117525750898163ffffffff168c0310155b1561176957600186975097505050505050506117bc565b82156117825750600096508695506117bc945050505050565b50505b8789036117918161189b565b9450600061179e8961189b565b90506117b18c878363ffffffff61208e16565b975097505050505050505b94509492505050565b6117cd612480565b6117da84838786036121c6565b95945050505050565b6117eb612480565b50604080516020810190915260709190911b600160701b600160e01b0316815290565b611816612492565b8251825103611823612480565b61183685602001518560200151846121c6565b9050611840612480565b61185386604001518660400151856121c6565b6040805180820190915292516001600160e01b039081168452905116602083015250949350505050565b600080600061188c858561192c565b915091506104268683836119b6565b610e10900490565b6000806118b58363ffffffff1661189b565b90506107086118c98463ffffffff16612086565b106118d8576001915050610309565b600019810160009081526001850160205260409020805463ffffffff1615806119115750805461070863ffffffff918216860390911610155b1561192157600192505050610309565b506000949350505050565b600080826001600160a01b0316846001600160a01b031614156119615760405162461bcd60e51b815260040161033390612c07565b826001600160a01b0316846001600160a01b031610611981578284611984565b83835b90925090506001600160a01b0382166119af5760405162461bcd60e51b815260040161033390612f55565b9250929050565b60008383836040516020016119cc9291906127ad565b604051602081830303815290604052805190602001206040516020016119f39291906127d4565b60408051601f198184030181529190528051602090910120949350505050565b6000806000611a20612209565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a93919061274c565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015611ace57600080fd5b505afa158015611ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b06919061274c565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611b4657600080fd5b505afa158015611b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e91906126f8565b925092509250826001600160701b0316600014158015611ba657506001600160701b03821615155b611bc25760405162461bcd60e51b815260040161033390612d3b565b8363ffffffff168163ffffffff1614611c1c5780840363ffffffff8116611be984866115eb565b516001600160e01b031602969096019563ffffffff8116611c0a85856115eb565b516001600160e01b0316029590950194505b5050509193909250565b6000806000611c3484611d92565b600082815260208890526040812054929450909250611c59828463ffffffff611da016565b159050801561042657611c72828463ffffffff61221316565b6000858152602089905260409020559695505050505050565b6060828203600080611c9c86611d92565b91509150600080611cac87611d92565b9150915084600202601e016001600160401b0381118015611ccc57600080fd5b506040519080825280601f01601f191660200182016040528015611cf7576020820181803683370190505b50600080825285815260208b905260408120549197508591611d1f908663ffffffff61221b16565b905060005b84831015611d6057611d3d89838363ffffffff61222416565b600192909201600081815260208d90526040902054909290915061010001611d24565b611d70828563ffffffff61237516565b9150611d8389838363ffffffff61222416565b50505050505050509392505050565b61010081049160ff90911690565b1c60019081161490565b600080611db5612209565b9050826001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611df057600080fd5b505afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e28919061274c565b91506000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea091906126f8565b925092509250826001600160701b0316600014158015611ec857506001600160701b03821615155b611ee45760405162461bcd60e51b815260040161033390612ccf565b8363ffffffff168163ffffffff1614611f1d5780840363ffffffff8116611f0b84866115eb565b516001600160e01b0316029590950194505b505050915091565b600080611f30612209565b9050826001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6b57600080fd5b505afa158015611f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa3919061274c565b91506000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611fe357600080fd5b505afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b91906126f8565b925092509250826001600160701b031660001415801561204357506001600160701b03821615155b61205f5760405162461bcd60e51b8152600401610333906129d9565b8363ffffffff168163ffffffff1614611f1d5780840363ffffffff8116611f0b85856115eb565b610e10900690565b60008060008061209d86611d92565b90925090506000808080846120d857856120c95760405162461bcd60e51b815260040161033390612f8c565b6001860395506001935061211e565b50600085815260208b905260409020546120f8818663ffffffff61238316565b9093509150821561210f578185038401935061211e565b60001990950194928401600101925b8215801561212c5750888411155b1561218d5750600085815260208b9052604090205480612170578561215e5750600096508695506116c3945050505050565b61010084019350600186039550612188565b612179816123be565b91508160ff0384019350600192505b61211e565b888411156121a85750600096508695506116c3945050505050565b60016121b48784612475565b97509750505050505050935093915050565b6121ce612480565b60405180602001604052808363ffffffff168686036001600160e01b0316816121f357fe5b046001600160e01b031681525090509392505050565b63ffffffff421690565b6001901b1790565b600019901b1690565b8161222e57612370565b82518060208501018060005b85811c1561236a575b85811c60ff1661225557600801612243565b85811c60071680801561229f57600181146122a457600281146122b757600381146122cd57600481146122ea5760058114612300576006811461231d576007811461233d57612360565b612360565b86830160f01b8452600284019350612360565b86600184010160f01b8452600284019350612360565b86600184010160e01b87840160f01b178452600484019350612360565b86600284010160f01b8452600284019350612360565b86600284010160e01b87840160f01b178452600484019350612360565b86600284010160e01b87600185010160f01b178452600484019350612360565b86600284010160d01b87600185010160e01b1787840160f01b1784526006840193505b505060030161223a565b50030183525b505050565b60001960ff919091031c1690565b60008061010083900384901b806123a15750600091508190506119af565b600184610100036123b1836123be565b0392509250509250929050565b600081806123de5760405162461bcd60e51b81526004016103339061298d565b600160801b81106123f1576080918201911c5b680100000000000000008110612409576040918201911c5b640100000000811061241d576020918201911c5b62010000811061242f576010918201911c5b6101008110612440576008918201911c5b60108110612450576004918201911c5b60048110612460576002918201911c5b6002811061246f576001820191505b50919050565b610100919091020190565b60408051602081019091526000815290565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b6040518060200160405280600081525090565b80356001600160a01b038116811461030957600080fd5b60008083601f840112612504578182fd5b5081356001600160401b0381111561251a578182fd5b60208301915083602080830285010111156119af57600080fd5b600060208284031215612545578081fd5b61030683836124dc565b60008060408385031215612561578081fd5b61256b84846124dc565b946020939093013593505050565b60008060006060848603121561258d578081fd5b61259785856124dc565b95602085013595506040909401359392505050565b600080600080608085870312156125c1578081fd5b84356001600160a01b03811681146125d7578182fd5b966020860135965060408601359560600135945092505050565b60008060208385031215612603578182fd5b82356001600160401b03811115612618578283fd5b612624858286016124f3565b90969095509350505050565b60008060008060008060808789031215612648578182fd5b86356001600160401b038082111561265e578384fd5b61266a8a838b016124f3565b90985096506020890135915080821115612682578384fd5b5061268f89828a016124f3565b979a9699509760408101359660609091013595509350505050565b600080600080606085870312156126bf578384fd5b84356001600160401b038111156126d4578485fd5b6126e0878288016124f3565b90989097506020870135966040013595509350505050565b60008060006060848603121561270c578283fd5b835161271781613063565b602085015190935061272881613063565b604085015190925063ffffffff81168114612741578182fd5b809150509250925092565b60006020828403121561275d578081fd5b5051919050565b805163ffffffff1682526020808201516001600160e01b039081169184019190915260409182015116910152565b80516001600160e01b03908116835260209182015116910152565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6020808252825182820181905260009190848201906040850190845b81811015612864578351151583529284019291840191600101612846565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156128645761289f838551612764565b928401926060929092019160010161288c565b602080825282518282018190526000919060409081850190868401855b828110156128f2576128e2848351612792565b92840192908501906001016128cf565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612864578351516001600160e01b03168352928401929184019160010161291b565b6020808252825182820181905260009190848201906040850190845b818110156128645783516001600160901b03168352928401929184019160010161295d565b901515815260200190565b6020808252602c908201527f426974733a3a686967686573744269745365743a2056616c756520302068617360408201526b081b9bc8189a5d1cc81cd95d60a21b606082015260800190565b60208082526046908201527f556e697377617056324f7261636c654c6962726172793a3a63757272656e744360408201527f756d756c61746976655072696365313a205061697220686173206e6f2072657360608201526532b93b32b99760d11b608082015260a00190565b6020808252604a908201527f496e6465786564556e697377617056324f7261636c653a3a5f67657454776f5760408201527f617950726963653a204e6f20707269636520666f756e6420696e2070726f76696060820152693232b2103930b733b29760b11b608082015260a00190565b60208082526050908201527f496e6465786564556e697377617056324f7261636c653a3a76616c69644d696e60408201527f4d61783a204d696e696d756d206167652063616e206e6f74206265206869676860608201526f32b9103a3430b71036b0bc34b6bab69760811b608082015260a00190565b60208082526049908201527f496e6465786564556e697377617056324f7261636c653a3a5f676574546f6b6560408201527f6e50726963653a204e6f20707269636520666f756e6420696e2070726f76696460608201526832b2103930b733b29760b91b608082015260a00190565b60208082526047908201527f496e6465786564556e697377617056324f7261636c653a3a5f6765744574685060408201527f726963653a204e6f20707269636520666f756e6420696e2070726f7669646564606082015266103930b733b29760c91b608082015260a00190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252605e908201527f496e6465786564556e697377617056324f7261636c653a3a636f6d707574654160408201527f766572616765546f6b656e73466f724574683a20546f6b656e7320616e64206160608201527f6d6f756e7473206861766520646966666572656e74206c656e677468732e0000608082015260a00190565b60208082526046908201527f556e697377617056324f7261636c654c6962726172793a3a63757272656e744360408201527f756d756c61746976655072696365303a205061697220686173206e6f2072657360608201526532b93b32b99760d11b608082015260a00190565b60208082526046908201527f556e697377617056324f7261636c654c6962726172793a3a63757272656e744360408201527f756d756c61746976655072696365733a205061697220686173206e6f2072657360608201526532b93b32b99760d11b608082015260a00190565b60208082526047908201527f496e646578656450726963654d61704c6962726172793a3a676574507269636560408201527f4f62736572766174696f6e73496e52616e67653a20496e76616c69642074696d606082015266652072616e676560c81b608082015260a00190565b6020808252605e908201527f496e6465786564556e697377617056324f7261636c653a3a636f6d707574654160408201527f766572616765457468466f72546f6b656e733a20546f6b656e7320616e64206160608201527f6d6f756e7473206861766520646966666572656e74206c656e677468732e0000608082015260a00190565b60208082526023908201527f4669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552466040820152624c4f5760e81b606082015260800190565b60208082526055908201527f496e6465786564556e697377617056324f7261636c653a3a676574507269636560408201527f4f62736572766174696f6e496e57696e646f773a204e6f207072696365206f6260608201527439b2b93b32b21034b71033b4bb32b7103437bab91760591b608082015260a00190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526038908201527f4b6579496e6465783a3a66696e644c6173745365744b65793a43616e206e6f7460408201527f2071756572792076616c7565207072696f7220746f20302e0000000000000000606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b606081016103098284612764565b604081016103098284612792565b90516001600160e01b0316815260200190565b6001600160901b0391909116815260200190565b6001600160701b038116811461307857600080fd5b5056fea2646970667358221220a846e57523fbe71d04a80087a86961afe3195a7659fb3586d4c1945e4b0904c164736f6c63430006080033",
  "devdoc": {
    "methods": {
      "canUpdatePrice(address)": {
        "details": "Returns a boolean indicating whether the price of `token` can be updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation."
      },
      "canUpdatePrices(address[])": {
        "details": "Returns a boolean array indicating whether the price of each token in `tokens` can be updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation."
      },
      "computeAverageEthForTokens(address,uint256,uint256,uint256)": {
        "details": "Compute the average value of `tokenAmount` ether in terms of weth.   * Computes the time-weighted average price of `token` in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by `wethAmount`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageEthForTokens(address[],uint256[],uint256,uint256)": {
        "details": "Compute the average value of each amount of tokens in `tokenAmounts` in terms of the corresponding token in `tokens`.   * Computes the time-weighted average price of each token in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by the corresponding amount in `tokenAmounts`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageEthPrice(address,uint256,uint256)": {
        "details": "Returns the UQ112x112 struct representing the average price of weth in terms of `token`.   * Computes the time-weighted average price of weth in terms of `token` by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageEthPrices(address[],uint256,uint256)": {
        "details": "Returns the UQ112x112 structs representing the average price of weth in terms of each token in `tokens`.   * Computes the time-weighted average price of weth in terms of each token by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageTokenPrice(address,uint256,uint256)": {
        "details": "Returns the UQ112x112 struct representing the average price of `token` in terms of weth.   * Computes the time-weighted average price of `token` in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageTokenPrices(address[],uint256,uint256)": {
        "details": "Returns the UQ112x112 structs representing the average price of each token in `tokens` in terms of weth.   * Computes the time-weighted average price of each token in terms of weth by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageTokensForEth(address,uint256,uint256,uint256)": {
        "details": "Compute the average value of `wethAmount` ether in terms of `token`.   * Computes the time-weighted average price of weth in terms of the token by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by `wethAmount`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeAverageTokensForEth(address[],uint256[],uint256,uint256)": {
        "details": "Compute the average value of each amount of ether in `wethAmounts` in terms of the corresponding token in `tokens`.   * Computes the time-weighted average price of weth in terms of each token by getting the current price from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old, then multiplies by the corresponding amount in `wethAmounts`.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeTwoWayAveragePrice(address,uint256,uint256)": {
        "details": "Returns the TwoWayAveragePrice struct representing the average price of weth in terms of `token` and the average price of `token` in terms of weth.   * Computes the time-weighted average price of weth in terms of `token` and the price of `token` in terms of weth by getting the current prices from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "computeTwoWayAveragePrices(address[],uint256,uint256)": {
        "details": "Returns the TwoWayAveragePrice structs representing the average price of weth in terms of each token in `tokens` and the average price of each token in terms of weth.   * Computes the time-weighted average price of weth in terms of each token and the price of each token in terms of weth by getting the current prices from Uniswap and searching for a historical price which is between `minTimeElapsed` and `maxTimeElapsed` seconds old.   * Note: `maxTimeElapsed` is only accurate to the nearest hour (rounded down) unless it is less than one hour. Note: `minTimeElapsed` is only accurate to the nearest hour (rounded up) unless it is less than one hour."
      },
      "getPriceObservationInWindow(address,uint256)": {
        "details": "Returns the price observation for `token` recorded in `priceKey`. Reverts if no prices have been recorded for that key.",
        "params": {
          "priceKey": "Index of the hour to query",
          "token": "Token to retrieve a price for"
        }
      },
      "getPriceObservationsInRange(address,uint256,uint256)": {
        "details": "Returns all price observations for `token` recorded between `timeFrom` and `timeTo`."
      },
      "hasPriceObservationInWindow(address,uint256)": {
        "details": "Returns a boolean indicating whether a price was recorded for `token` at `priceKey`.",
        "params": {
          "priceKey": "Index of the hour to check",
          "token": "Token to check if the oracle has a price for"
        }
      },
      "updatePrice(address)": {
        "details": "Attempts to update the price of `token` and returns a boolean indicating whether it was updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation."
      },
      "updatePrices(address[])": {
        "details": "Attempts to update the price of each token in `tokens` and returns a boolean array indicating which tokens had their prices updated.   * Note: The price can be updated if there is no observation for the current hour and at least 30 minutes have passed since the last observation."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 276,
        "contract": "temp-contracts/IndexedUniswapV2Oracle.sol:IndexedUniswapV2Oracle",
        "label": "_tokenPriceMaps",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(IndexedPriceMap)2092_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(IndexedPriceMap)2092_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IndexedPriceMapLibrary.IndexedPriceMap)",
        "numberOfBytes": "32",
        "value": "t_struct(IndexedPriceMap)2092_storage"
      },
      "t_mapping(t_uint256,t_struct(PriceObservation)3071_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PriceLibrary.PriceObservation)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceObservation)3071_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(IndexedPriceMap)2092_storage": {
        "encoding": "inplace",
        "label": "struct IndexedPriceMapLibrary.IndexedPriceMap",
        "members": [
          {
            "astId": 2087,
            "contract": "temp-contracts/IndexedUniswapV2Oracle.sol:IndexedUniswapV2Oracle",
            "label": "keyIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 2091,
            "contract": "temp-contracts/IndexedUniswapV2Oracle.sol:IndexedUniswapV2Oracle",
            "label": "priceMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(PriceObservation)3071_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PriceObservation)3071_storage": {
        "encoding": "inplace",
        "label": "struct PriceLibrary.PriceObservation",
        "members": [
          {
            "astId": 3066,
            "contract": "temp-contracts/IndexedUniswapV2Oracle.sol:IndexedUniswapV2Oracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3068,
            "contract": "temp-contracts/IndexedUniswapV2Oracle.sol:IndexedUniswapV2Oracle",
            "label": "priceCumulativeLast",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 3070,
            "contract": "temp-contracts/IndexedUniswapV2Oracle.sol:IndexedUniswapV2Oracle",
            "label": "ethPriceCumulativeLast",
            "offset": 0,
            "slot": "1",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "2493000",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "canUpdatePrice(address)": "infinite",
      "canUpdatePrices(address[])": "infinite",
      "computeAverageEthForTokens(address,uint256,uint256,uint256)": "infinite",
      "computeAverageEthForTokens(address[],uint256[],uint256,uint256)": "infinite",
      "computeAverageEthPrice(address,uint256,uint256)": "infinite",
      "computeAverageEthPrices(address[],uint256,uint256)": "infinite",
      "computeAverageTokenPrice(address,uint256,uint256)": "infinite",
      "computeAverageTokenPrices(address[],uint256,uint256)": "infinite",
      "computeAverageTokensForEth(address,uint256,uint256,uint256)": "infinite",
      "computeAverageTokensForEth(address[],uint256[],uint256,uint256)": "infinite",
      "computeTwoWayAveragePrice(address,uint256,uint256)": "infinite",
      "computeTwoWayAveragePrices(address[],uint256,uint256)": "infinite",
      "getPriceObservationInWindow(address,uint256)": "infinite",
      "getPriceObservationsInRange(address,uint256,uint256)": "infinite",
      "hasPriceObservationInWindow(address,uint256)": "infinite",
      "updatePrice(address)": "infinite",
      "updatePrices(address[])": "infinite"
    },
    "internal": {
      "_getEthPrice(address,uint256,uint256)": "infinite",
      "_getTokenPrice(address,uint256,uint256)": "infinite",
      "_getTwoWayPrice(address,uint256,uint256)": "infinite"
    }
  }
}